 ---
published: false
layout: post
tag: redux
original: https://hackernoon.com/redux-step-by-step-a-simple-and-robust-workflow-for-real-life-apps-1fdf7df46092#
title: Redux Step by Step: A Simple and Robust Workflow for Real Life Apps
author: "Tal Kol"
translator: "Ирина Смышляева"

---

Redux стал одной из самых популярных реализаций Flux для управления данными в приложениях на React. Чтение про Redux, тем не менее, вызывает сенсорную перегрузку, когда за деревьями уже не видно леса. Ниже представлен простой и уверенный процесс реализации real life приложения с Redux'ом. Реализация настоящего приложения показана шаг за шагом. Принципы Redux применяются на практических примерах и в деталях описано каждое решение и его причины.

## Предвзятый подход к идиоматичному редаксу

Редакс стал чем-то большим, нежели библиотека, это целая экосистема. Одна из причин его популярности - это способность сосуществовать вместе с разными стилями написания и подходами. Если мне нужны асинхронные действия, стоит мне использовать thunks? или промисы? или sagas?

Нет одного правильного ответа какая разновидность "лучшая". И нет одного правильного способа использовать Redux. Надо сказать, что слишком большой выбор - это проблема. Я хотел бы показать предвзятый подход, который нравится именно мне. Он здравый (трудоемкий, надежный), подходит для реальных сценариев, и - самое главное - он простой.

## Так давайте уже создадим приложение!

Для разбора нам нужен жизненный пример. А раз уж мы предвзяты, можем считать Reddit самым интересным местом в интернете. Давайте создадим приложение, которое будет показывать самые интересные посты оттуда.

На первом экране мы спросим юзера про три наиболее интересные ему темы. Мы будем забирать темы из дефольного списка сабреддитов с главной страницы.

После того, как юзер сделает выбор, мы покажем список постов по каждой из этих трех тем, который можно отфильтровать - выбрать все темы или одну из них. Когда пользователь кликает на пост в списке, мы показываем его контент.

## Настройка

Раз мы используем реакт для веба (мы можем добавить реакт нейтив в будущий пост), мы начинаем с create react app, официального стартер кита. Также с помощью npm установим redux, react-redux и redux-thunk. В результате получится как-то так[].

To get the boilerplate out of the way, let’s also quickly initialize the Redux store and hook up thunk middleware in index.js:

```

import React from 'react';
import ReactDOM from 'react-dom';
import { createStore, applyMiddleware, combineReducers } from 'redux';
import { Provider } from 'react-redux';
import thunk from 'redux-thunk';
import App from './App';
import './index.css';

import * as reducers from './store/reducers';
const store = createStore(combineReducers(reducers), applyMiddleware(thunk));

ReactDOM.render(
  <Provider store={store}>
    <App />
  </Provider>,
  document.getElementById('root')
);

```

## Цикл жизни Flux в Redux приложении

Одна из основных вещей, которые упускают в туториалах по Redux  - это общая картина и где Redux подходит. Redux - это реализация Flux архитектуры - паттерн для пробрасывания данных по React приложению.

По классическому Flux состояние приложения хранится в сторах. Dispatched actions влияют на изменение состояния, после чего представление, следящее за изменением состояния, перерисовываются.

<img src='https://cdn-images-1.medium.com/max/1600/1*stmn8kxXJrX9hbk39hHQJA.png' alt='flux life circle'/>

Flux упрощает жизнь, прокидывая данные в одном направлении. Это исключает эффект спагетти когда код разрастается и становится более сложным.


Одна из сложностей понимания Redux в изобилии неочевидных терминов вроде reducers, selectors and thunks





















ь
